# /// script
# requires-python = ">=3.9"
# dependencies = []
# ///

"""Automate a series of GitHub-related commands for setting up a repository."""

import asyncio
import json
import logging
import subprocess  # nosec
import shutil
import tempfile
from pathlib import Path
from subprocess import CalledProcessError
from typing import Dict, List


def get_tool_path(tool_name: str) -> Path:
    """Get the path of a CLI tool, ensuring it is installed."""
    tool_path = shutil.which(tool_name)
    if tool_path is None:
        raise FileNotFoundError(f"{tool_name} is not installed or not in the system PATH.")
    return Path(tool_path)


def run_command_sync(command: List[str]) -> str:
    """Run a command synchronously using subprocess with shell=False."""
    result = subprocess.run(  # nosec
        command, check=True, text=True, capture_output=True, shell=False
    )
    return result.stdout.strip()


async def run_command(command: List[str]) -> str:
    """Run a command asynchronously using asyncio with shell=False."""
    return await asyncio.to_thread(run_command_sync, command)


async def configure_ruleset(
    # target,
    rule_path: Path,
    *,
    # name: str,
    # include: List[str],
    gh_path: Path,
    organisation: str,
    project_name: str,
    # bypass_actors: List[Dict[str, str]],
) -> None:
    """Configure a branch ruleset instead of branch protection."""
    # Fetch the repository ID
    command = [
        gh_path, "repo", "view", f"{organisation}/{project_name}",
        "--json", "id", "--jq", ".id"
    ]
    repo_id = (await run_command(command)).strip()

    # Load json
    with rule_path.open("r", encoding="utf-8") as rule_file:
        ruleset_payload = json.load(rule_file)

    ruleset_payload['id'] = repo_id

    # Create a temporary file to store the JSON payload
    with tempfile.NamedTemporaryFile(delete=False, mode='w', newline='', suffix='.json') as temp_file:
        json.dump(ruleset_payload, temp_file)
        temp_file_name = temp_file.name

    # Construct the command with all arguments inline
    command = [
        gh_path, "api", "--method", "POST",
        (
            f"/repos/{organisation}/{project_name}/rulesets"
            if ruleset_payload.get("source_type") == "Repository"
            else f"/orgs/{organisation}/rulesets"
        ),
        "--input", temp_file_name,
    ]
    try:
        await run_command(command)
    except CalledProcessError as e:
        logging.info(e)


async def run_all_commands(gh_path: Path) -> None:
    """Run all the necessary commands based on the provided conditions."""

    # Example condition and variables - replace these with actual logic
    organisation = "{{ organisation }}"
    project_name = "{% include pathjoin('includes', 'project_slug.jinja') %}"
    rules_directory = Path("github_protection_ruleset")

    await asyncio.gather(
        *[
            configure_ruleset(
                rule_path,
                gh_path=gh_path,
                organisation=organisation,
                project_name=project_name,
            ) for rule_path in rules_directory.glob("**/*.json")
        ],
    )


def main() -> None:
    """Main script."""
    gh_path = get_tool_path("gh")

    asyncio.run(run_all_commands(gh_path=gh_path))


if __name__ == "__main__":
    main()
